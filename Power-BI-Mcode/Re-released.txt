let
    Source = Python.Execute("import pandas as pd#(lf)import aiohttp#(lf)import asyncio#(lf)import re#(lf)import requests#(lf)from bs4 import BeautifulSoup as bs#(lf)#(lf)# change the variable below to &this_months_office_kb_number& in the PowerBI execute statement. Also replace start, tuesday, and end with their parameters.#(lf)new_kb = "&Text.From(#"This Month's Office KB")&"#(lf)start = "&Text.From(#"Report Start")&"#(lf)end = "&#"Report End"&"#(lf)tuesday = "&#"Patch Tuesday String"&"#(lf)#(lf)deployment_url = f""https://api.msrc.microsoft.com/sug/v2.0/en-US/deployment/?%24orderBy=product+desc&%24filter=%28releaseDate+gt+{start}T00%3A00%3A00-05%3A00%29+and+%28releaseDate+lt+{end}T23%3A59%3A59-05%3A00%29""#(lf)#(lf)#(lf)def get_kb_data(url):#(lf)    req = requests.get(url)#(lf)    json = req.json()#(lf)    # kb_list = []#(lf)    # for item in json['value']:#(lf)    #     item_text = item.get('articleName', """")#(lf)    #     search = re.search(r""^\d+"", item_text)#(lf)    #     if search:#(lf)    #         kb_list.append(item.get('articleName'))#(lf)    # kb_list = list(set(kb_list)) # if only kb numbers needed#(lf)    full_kb_data = pd.DataFrame(json['value'])  # creates dataframe from full json values#(lf)    return full_kb_data#(lf)#(lf)#(lf)async def gather_title(kb: str, session: aiohttp.ClientSession):#(lf)    url = f""https://support.microsoft.com/help/{kb}""#(lf)    async with session.get(url) as article:#(lf)        html = await article.text()#(lf)        doc = bs(html, 'html.parser')#(lf)        title = doc.find('title')#(lf)        if title:#(lf)            date_title = re.search(r""([A-Z][a-z]+ \d\d?, ?\d\d\d\d)"", title.text)#(lf)            if date_title:#(lf)                date_title = date_title.group(1)#(lf)            else:#(lf)                date_title = title.text#(lf)        date_title = date_title.strip()#(lf)        titles_dict = {'articleName': kb}#(lf)        if tuesday not in date_title:#(lf)            titles_dict['Title'] = date_title.strip()#(lf)        else:#(lf)            titles_dict['Title'] = """"#(lf)        return titles_dict#(lf)#(lf)#(lf)async def gather_titles(kb_list: list[str]):#(lf)    titles = []#(lf)    connector = aiohttp.TCPConnector(force_close=True, limit=150)#(lf)    async with aiohttp.ClientSession(connector=connector) as session:#(lf)        for kb in kb_list:#(lf)            titles.append(asyncio.create_task(gather_title(kb, session)))#(lf)        await asyncio.gather(*titles)#(lf)    dict_list = []#(lf)    for item in titles:#(lf)        dict_list.append(item.result())#(lf)    titles_df = pd.DataFrame(dict_list)#(lf)    return titles_df#(lf)#(lf)#(lf)kb_df = get_kb_data(deployment_url)#(lf)#(lf)kb_nums = kb_df['articleName'].tolist()#(lf)kb_nums = list(set(kb_nums))#(lf)kb_nums = [x for x in kb_nums if str(x) != 'nan']#(lf)for kb in kb_nums:#(lf)    reg = re.search(r""^\d+$"", kb)#(lf)    if not reg:#(lf)        kb_nums.remove(kb)#(lf)kb_nums = kb_nums#(lf)#(lf)#(lf)re_released_df = asyncio.run(gather_titles(kb_nums))"),
    re_released_df1 = Source{[Name="re_released_df"]}[Value],
    #"Filtered Rows" = Table.SelectRows(re_released_df1, each ([Title] <> "")),
    #"Renamed Columns" = Table.RenameColumns(#"Filtered Rows",{{"articleName", "KB"}}),
    #"Filtered Rows1" = Table.SelectRows(#"Renamed Columns", each ([KB] <> "kernel" and [KB] <> "pytorch" and [KB] <> "telegraf" and [KB] <> "VLSC"))
in
    #"Filtered Rows1"