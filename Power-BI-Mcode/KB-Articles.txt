let
    Source = Python.Execute("import pandas as pd#(lf)import aiohttp#(lf)import asyncio#(lf)import re#(lf)import requests#(lf)from bs4 import BeautifulSoup as bs#(lf)#(lf)# change the variable below to &this_months_office_kb_number& in the PowerBI execute statement. Also replace start, tuesday, and end with their parameters.#(lf)new_kb = "&Text.From(#"This Month's Office KB")&"#(lf)start = "&Text.From(#"Report Start")&"#(lf)end = "&#"Report End"&"#(lf)tuesday = "&#"Patch Tuesday String"&"#(lf)#(lf)deployment_url = f""https://api.msrc.microsoft.com/sug/v2.0/en-US/deployment/?%24orderBy=product+desc&%24filter=%28releaseDate+gt+{start}T00%3A00%3A00-05%3A00%29+and+%28releaseDate+lt+{end}T23%3A59%3A59-05%3A00%29""#(lf)#(lf)#(lf)def get_kb_data(url):#(lf)    req = requests.get(url)#(lf)    json = req.json()#(lf)    # kb_list = []#(lf)    # for item in json['value']:#(lf)    #     item_text = item.get('articleName', """")#(lf)    #     search = re.search(r""^\d+"", item_text)#(lf)    #     if search:#(lf)    #         kb_list.append(item.get('articleName'))#(lf)    # kb_list = list(set(kb_list)) # if only kb numbers needed#(lf)    full_kb_data = pd.DataFrame(json['value'])  # creates dataframe from full json values#(lf)    return full_kb_data#(lf)#(lf)#(lf)async def gather_title(kb: str, session: aiohttp.ClientSession):#(lf)    url = f""https://support.microsoft.com/help/{kb}""#(lf)    async with session.get(url) as article:#(lf)        html = await article.text()#(lf)        doc = bs(html, 'html.parser')#(lf)        title = doc.find('title')#(lf)        if title:#(lf)            date_title = re.search(r""([A-Z][a-z]+ \d\d?, ?\d\d\d\d)"", title.text)#(lf)            if date_title:#(lf)                date_title = date_title.group(1)#(lf)            else:#(lf)                date_title = title.text#(lf)        date_title = date_title.strip()#(lf)        titles_dict = {'articleName': kb}#(lf)        if tuesday not in date_title:#(lf)            titles_dict['Title'] = date_title.strip()#(lf)        else:#(lf)            titles_dict['Title'] = """"#(lf)        return titles_dict#(lf)#(lf)#(lf)async def gather_titles(kb_list: list[str]):#(lf)    titles = []#(lf)    connector = aiohttp.TCPConnector(force_close=True, limit=150)#(lf)    async with aiohttp.ClientSession(connector=connector) as session:#(lf)        for kb in kb_list:#(lf)            titles.append(asyncio.create_task(gather_title(kb, session)))#(lf)        await asyncio.gather(*titles)#(lf)    dict_list = []#(lf)    for item in titles:#(lf)        dict_list.append(item.result())#(lf)    titles_df = pd.DataFrame(dict_list)#(lf)    return titles_df#(lf)#(lf)#(lf)kb_df = get_kb_data(deployment_url)#(lf)#(lf)kb_nums = kb_df['articleName'].tolist()#(lf)kb_nums = list(set(kb_nums))#(lf)kb_nums = [x for x in kb_nums if str(x) != 'nan']#(lf)for kb in kb_nums:#(lf)    reg = re.search(r""^\d+$"", kb)#(lf)    if not reg:#(lf)        kb_nums.remove(kb)#(lf)kb_nums = kb_nums#(lf)#(lf)#(lf)re_released_df = asyncio.run(gather_titles(kb_nums))"),
    kb_df1 = Source{[Name="kb_df"]}[Value],
    #"Replaced Value3" = Table.ReplaceValue(kb_df1,"-"," ",Replacer.ReplaceText,{"articleName"}),
    #"Filtered Rows2" = Table.SelectRows(#"Replaced Value3", each ([articleName] <> "" and [articleName] <> "App Store" and [articleName] <> "Click to Run" and [articleName] <> "cloud hypervisor" and [articleName] <> "curl" and [articleName] <> "kernel" and [articleName] <> "pytorch" and [articleName] <> "Release Notes" and [articleName] <> "telegraf" and [articleName] <> "Update Information")),
    #"Removed Columns" = Table.RemoveColumns(#"Filtered Rows2",{"productId", "platformId", "severityId", "impactId", "ordinal", "knownIssuesUrl"}),
    #"Removed Columns1" = Table.RemoveColumns(#"Removed Columns",{"productFamilyId"}),
    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns1",{{"product", "Product"}}),
    #"Replaced Value" = Table.ReplaceValue(#"Renamed Columns","T07:00:00Z","",Replacer.ReplaceText,{"releaseDate"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Replaced Value",{{"severity", "Severity"}, {"impact", "Impact"}, {"articleName", "KB"}, {"articleUrl", "URL"}, {"downloadName", "Type"}, {"downloadUrl", "Catalog"}}),
    #"Renamed Columns2" = Table.RenameColumns(#"Renamed Columns1",{{"releaseDate", "Release Date"}}),
    #"Filtered Rows" = Table.SelectRows(#"Renamed Columns2", each ([KB] <> "" and [KB] <> "App Store" and [KB] <> "Click to Run" and [KB] <> "cloud-hypervisor" and [KB] <> "curl" and [KB] <> "kernel" and [KB] <> "pytorch" and [KB] <> "Release Notes" and [KB] <> "telegraf" and [KB] <> "Update Information")),
    #"Renamed Columns3" = Table.RenameColumns(#"Filtered Rows",{{"productFamily", "Product Family"}}),
    #"Appended Query" = Table.Combine({#"Renamed Columns3", scraped_office_kbs}),
    #"RV01" = Table.ReplaceValue(#"Appended Query","(Server Core installation)","",Replacer.ReplaceText,{"Product"}),
    #"RV02" = Table.ReplaceValue(#"RV01","Service Pack 1","",Replacer.ReplaceText,{"Product"}),
    #"RV03" = Table.ReplaceValue(#"RV02","Service Pack 2","",Replacer.ReplaceText,{"Product"}),
    #"RV04" = Table.ReplaceValue(#"RV03","Service Pack 3","",Replacer.ReplaceText,{"Product"}),
    #"RV05" = Table.ReplaceValue(#"RV04","Service Pack 4","",Replacer.ReplaceText,{"Product"}),
    #"RV06" = Table.ReplaceValue(#"RV05","32-bit Systems","",Replacer.ReplaceText,{"Product"}),
    #"RV07" = Table.ReplaceValue(#"RV06","32-Bit Systems","",Replacer.ReplaceText,{"Product"}),
    #"RV08" = Table.ReplaceValue(#"RV07","32-bit systems","",Replacer.ReplaceText,{"Product"}),
    #"RV09" = Table.ReplaceValue(#"RV08","64-bit Systems","",Replacer.ReplaceText,{"Product"}),
    #"RV10" = Table.ReplaceValue(#"RV09","64-Bit Systems","",Replacer.ReplaceText,{"Product"}),
    #"RV11" = Table.ReplaceValue(#"RV10","64-bit systems","",Replacer.ReplaceText,{"Product"}),
    #"RV12" = Table.ReplaceValue(#"RV11","32-bit editions","",Replacer.ReplaceText,{"Product"}),
    #"RV13" = Table.ReplaceValue(#"RV12","32-bit Editions","",Replacer.ReplaceText,{"Product"}),
    #"RV14" = Table.ReplaceValue(#"RV13","32-Bit editions","",Replacer.ReplaceText,{"Product"}),
    #"RV15" = Table.ReplaceValue(#"RV14","32-Bit Editions","",Replacer.ReplaceText,{"Product"}),
    #"RV16" = Table.ReplaceValue(#"RV15","32-bit Editions","",Replacer.ReplaceText,{"Product"}),
    #"RV17" = Table.ReplaceValue(#"RV16","32-bit edition","",Replacer.ReplaceText,{"Product"}),
    #"RV18" = Table.ReplaceValue(#"RV17","32-Bit edition","",Replacer.ReplaceText,{"Product"}),
    #"RV19" = Table.ReplaceValue(#"RV18","32-Bit Edition","",Replacer.ReplaceText,{"Product"}),
    #"RV20" = Table.ReplaceValue(#"RV19","32-bit Edition","",Replacer.ReplaceText,{"Product"}),
    #"RV21" = Table.ReplaceValue(#"RV20","64-bit editions","",Replacer.ReplaceText,{"Product"}),
    #"RV22" = Table.ReplaceValue(#"RV21","64-bit Editions","",Replacer.ReplaceText,{"Product"}),
    #"RV23" = Table.ReplaceValue(#"RV22","64-Bit editions","",Replacer.ReplaceText,{"Product"}),
    #"RV24" = Table.ReplaceValue(#"RV23","64-Bit Editions","",Replacer.ReplaceText,{"Product"}),
    #"RV25" = Table.ReplaceValue(#"RV24","64-bit Editions","",Replacer.ReplaceText,{"Product"}),
    #"RV26" = Table.ReplaceValue(#"RV25","64-bit edition","",Replacer.ReplaceText,{"Product"}),
    #"RV27" = Table.ReplaceValue(#"RV26","64-Bit edition","",Replacer.ReplaceText,{"Product"}),
    #"RV28" = Table.ReplaceValue(#"RV27","64-Bit Edition","",Replacer.ReplaceText,{"Product"}),
    #"RV29" = Table.ReplaceValue(#"RV28","64-bit Edition","",Replacer.ReplaceText,{"Product"}),
    #"RV30" = Table.ReplaceValue(#"RV29","for ARM64-based Systems","",Replacer.ReplaceText,{"Product"}),
    #"RV31" = Table.ReplaceValue(#"RV30","for ARM64-based systems","",Replacer.ReplaceText,{"Product"}),
    #"RV32" = Table.ReplaceValue(#"RV31","for x64-based Systems","",Replacer.ReplaceText,{"Product"}),
    #"RV33" = Table.ReplaceValue(#"RV32","for x64-based System","",Replacer.ReplaceText,{"Product"}),
    #"RV34" = Table.ReplaceValue(#"RV33","for","",Replacer.ReplaceText,{"Product"}),
    #"RV35" = Table.ReplaceValue(#"RV34","Version 1607","",Replacer.ReplaceText,{"Product"}),
    #"RV36" = Table.ReplaceValue(#"RV35","Version 1809","",Replacer.ReplaceText,{"Product"}),
    #"RV37" = Table.ReplaceValue(#"RV36","Version 20H2","",Replacer.ReplaceText,{"Product"}),
    #"RV38" = Table.ReplaceValue(#"RV37","Version 22H2","",Replacer.ReplaceText,{"Product"}),
    #"RV39" = Table.ReplaceValue(#"RV38","Version 22H1","",Replacer.ReplaceText,{"Product"}),
    #"RV40" = Table.ReplaceValue(#"RV39","GDR","",Replacer.ReplaceText,{"Product"}),
    #"RV41" = Table.ReplaceValue(#"RV40","QFE","",Replacer.ReplaceText,{"Product"}),
    #"RV42" = Table.ReplaceValue(#"RV41","()","",Replacer.ReplaceText,{"Product"}),
    #"RV43" = Table.ReplaceValue(#"RV42","GDR","",Replacer.ReplaceText,{"Product"}),
    #"RV44" = Table.ReplaceValue(#"RV43","Version 21H2","",Replacer.ReplaceText,{"Product"}),
    #"RV45" = Table.ReplaceValue(#"RV44","version 21H2","",Replacer.ReplaceText,{"Product"}),
    #"RV46" = Table.ReplaceValue(#"RV45","Microsoft","",Replacer.ReplaceText,{"Product"}),
    #"RV47" = Table.ReplaceValue(#"RV46","(CU 4)","",Replacer.ReplaceText,{"Product"}),
    #"RV48" = Table.ReplaceValue(#"RV47","(CU 18)","",Replacer.ReplaceText,{"Product"}),
    #"RV49" = Table.ReplaceValue(#"RV48","(CU 31)","",Replacer.ReplaceText,{"Product"}),
    #"RV50" = Table.ReplaceValue(#"RV49","Mac","",Replacer.ReplaceText,{"Product"}),
    #"RV51" = Table.ReplaceValue(#"RV50","x64-Based Systems","",Replacer.ReplaceText,{"Product"}),
    #"RV52" = Table.ReplaceValue(#"RV51","GDR","",Replacer.ReplaceText,{"Product"}),
    #"RV53" = Table.ReplaceValue(#"RV52","GDR","",Replacer.ReplaceText,{"Product"}),
    #"RV54" = Table.ReplaceValue(#"RV53","GDR","",Replacer.ReplaceText,{"Product"}),
    #"RV55" = Table.ReplaceValue(#"RV54","GDR","",Replacer.ReplaceText,{"Product"}),
    #"RV99" = Table.ReplaceValue(#"RV55","  "," ",Replacer.ReplaceText,{"Product"}),
    #"Trimmed Text" = Table.TransformColumns(RV99,{{"Product", Text.Trim, type text}}),
    #"Grouped Rows" = Table.Group(#"Trimmed Text", {"KB"}, {{"All Columns", each _, type table [id=nullable text, Release Date=text, releaseNumber=nullable text, Product Family=nullable text, Product=nullable text, Severity=nullable text, Impact=nullable text, KB=nullable text, URL=nullable text, Type=text, Catalog=nullable text, fixedBuildNumber=nullable text, supercedence=nullable text, rebootRequired=nullable text, knownIssuesName=nullable text, platform=nullable text]}}),
    #"Added Custom" = Table.AddColumn(#"Grouped Rows", "Custom", each List.Distinct(Table.Column([All Columns], "Product"))),
    #"Extracted Values" = Table.TransformColumns(#"Added Custom", {"Custom", each Text.Combine(List.Transform(_, Text.From), ", "), type text}),
    #"Renamed Columns4" = Table.RenameColumns(#"Extracted Values",{{"Custom", "Products"}}),
    #"Added Custom1" = Table.AddColumn(#"Renamed Columns4", "Severity", each List.Distinct(Table.Column([All Columns], "Severity"))),
    #"Extracted Values1" = Table.TransformColumns(#"Added Custom1", {"Severity", each Text.Combine(List.Transform(_, Text.From), ", "), type text}),
    #"Added Custom2" = Table.AddColumn(#"Extracted Values1", "Impact", each List.Distinct(Table.Column([All Columns], "Impact"))),
    #"Extracted Values2" = Table.TransformColumns(#"Added Custom2", {"Impact", each Text.Combine(List.Transform(_, Text.From), ", "), type text}),
    #"Added Custom3" = Table.AddColumn(#"Extracted Values2", "Type", each List.Distinct(Table.Column([All Columns], "Type"))),
    #"Extracted Values3" = Table.TransformColumns(#"Added Custom3", {"Type", each Text.Combine(List.Transform(_, Text.From), ", "), type text}),
    #"Replaced Value1" = Table.ReplaceValue(#"Extracted Values3","","Update",Replacer.ReplaceValue,{"Type"}),
    #"Added Custom4" = Table.AddColumn(#"Replaced Value1", "Release Date", each List.Distinct(Table.Column([All Columns], "Release Date"))),
    #"Extracted Values4" = Table.TransformColumns(#"Added Custom4", {"Release Date", each Text.Combine(List.Transform(_, Text.From), ", "), type text}),
    #"Added Custom5" = Table.AddColumn(#"Extracted Values4", "Catalog", each let 
catalog_urls = List.Distinct(Table.Column([All Columns], "Catalog")),
no_nulls = List.RemoveNulls(catalog_urls),
count = List.Count(no_nulls),
catalog_url = "https://catalog.update.microsoft.com/Search.aspx?q=KB",
y = if count > 1 then {Text.Combine({ catalog_url, [KB] })} else no_nulls
in 
y),
    #"Extracted Values5" = Table.TransformColumns(#"Added Custom5", {"Catalog", each Text.Combine(List.Transform(_, Text.From), ", "), type text}),
    #"Added Custom6" = Table.AddColumn(#"Extracted Values5", "Known Issues", each List.Distinct(Table.Column([All Columns], "knownIssuesName"))),
    #"Extracted Values6" = Table.TransformColumns(#"Added Custom6", {"Known Issues", each Text.Combine(List.Transform(_, Text.From), ", "), type text}),
    #"Replaced Value2" = Table.ReplaceValue(#"Extracted Values6","","None",Replacer.ReplaceValue,{"Known Issues"}),
    #"Added Conditional Column" = Table.AddColumn(#"Replaced Value2", "Isssues", each if [Known Issues] = "None" then "None" else "Yes", type text),
    #"Removed Columns2" = Table.RemoveColumns(#"Added Conditional Column",{"Known Issues"}),
    #"Renamed Columns5" = Table.RenameColumns(#"Removed Columns2",{{"Isssues", "Known Isssues"}}),
    #"Merged Queries" = Table.NestedJoin(#"Renamed Columns5", {"KB"}, re_released_df, {"KB"}, "re_released_df", JoinKind.LeftOuter),
    #"Expanded re_released_df" = Table.ExpandTableColumn(#"Merged Queries", "re_released_df", {"Title"}, {"re_released_df.Title"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Expanded re_released_df",{{"re_released_df.Title", type text}}),
    #"Inserted Merged Column" = Table.AddColumn(#"Changed Type", "Title", each Text.Combine({[re_released_df.Title], " ", [Type], " for ", [Products]})),
    #"Trimmed Text1" = Table.TransformColumns(#"Inserted Merged Column",{{"Title", Text.Trim, type text}}),
    #"Removed Columns3" = Table.RemoveColumns(#"Trimmed Text1",{"re_released_df.Title"}),
    #"Reordered Columns" = Table.ReorderColumns(#"Removed Columns3",{"KB", "Title", "All Columns", "Products", "Severity", "Impact", "Type", "Release Date", "Catalog", "Known Isssues"}),
    #"Sorted Rows" = Table.Sort(#"Reordered Columns",{{"Title", Order.Ascending}}),
    #"Filtered Rows1" = Table.SelectRows(#"Sorted Rows", each ([KB] <> "Information" and [KB] <> "qt5 qtbase" and [KB] <> "qt5 qtsvg")),
    #"Added Custom7" = Table.AddColumn(#"Filtered Rows1", "Product Family", each let 
distinct_family = List.Distinct(Table.Column([All Columns], "Product Family")),
no_null_family = List.RemoveNulls(distinct_family)
in
no_null_family),
    #"Extracted Values7" = Table.TransformColumns(#"Added Custom7", {"Product Family", each Text.Combine(List.Transform(_, Text.From), ", "), type text}),
    #"Replaced Value4" = Table.ReplaceValue(#"Extracted Values7","","Microsoft Office",Replacer.ReplaceValue,{"Product Family"}),
    #"Inserted Merged Column1" = Table.AddColumn(#"Replaced Value4", "Link", each Text.Combine({"https://support.microsoft.com/help/", [KB]}), type text),
    #"Filtered Rows3" = Table.SelectRows(#"Inserted Merged Column1", each ([KB] <> "Description" and [KB] <> "nghttp2" and [KB] <> "VLSC"))
in
    #"Filtered Rows3"